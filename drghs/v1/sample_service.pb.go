// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sample_service.proto

package drghs_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request message for [SampleService.ListGitCommits][].
type ListGitCommitsRequest struct {
	// Required. The resource name of the repository associated with the
	// [GitCommits][GitCommit], in the format `owners/*/repositories/*`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. Limit the number of [GitCommits][GitCommit] to include in the
	// response. Fewer gitCommits than requested might be returned.
	//
	// The maximum page size is `100`. If unspecified, the page size will be the
	// maximum. Further [GitCommits][GitCommit] can subsequently be obtained
	// by including the [ListGitCommitsResponse.next_page_token][] in a
	// subsequent request.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. To request the first page of results, `page_token` must be empty.
	// To request the next page of results, page_token must be the value of
	// [ListGitCommitsResponse.next_page_token][] returned by a previous call to
	// [GitCommitservice.ListGitCommits][].
	//
	// The page token is valid for only 2 hours.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. Filter expression used to only include resources that match the
	// filter in the response. Filter must be in following the format:
	//
	//     field1=123
	//     field2="Foo bar"
	//     field3 IN (value3, value4)
	//     field4 LIKE "%somestring%"
	//
	// Valid filter fields are: `name`, `repo`, and `size`.
	//
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. Specify how the results should be sorted. The fields supported
	// for sorting are `name` and `size`.
	// The default ordering is by `name`. Prefix with `-` to specify
	// descending order, e.g. `-name`.
	OrderBy              string   `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListGitCommitsRequest) Reset()         { *m = ListGitCommitsRequest{} }
func (m *ListGitCommitsRequest) String() string { return proto.CompactTextString(m) }
func (*ListGitCommitsRequest) ProtoMessage()    {}
func (*ListGitCommitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4308c33cfcf987be, []int{0}
}

func (m *ListGitCommitsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListGitCommitsRequest.Unmarshal(m, b)
}
func (m *ListGitCommitsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListGitCommitsRequest.Marshal(b, m, deterministic)
}
func (m *ListGitCommitsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGitCommitsRequest.Merge(m, src)
}
func (m *ListGitCommitsRequest) XXX_Size() int {
	return xxx_messageInfo_ListGitCommitsRequest.Size(m)
}
func (m *ListGitCommitsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGitCommitsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListGitCommitsRequest proto.InternalMessageInfo

func (m *ListGitCommitsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListGitCommitsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListGitCommitsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListGitCommitsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListGitCommitsRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

// Response message for [SampleService.ListGitCommits][].
type ListGitCommitsResponse struct {
	// The list of [GitCommits][GitCommit].
	GitCommits []*GitCommit `protobuf:"bytes,1,rep,name=git_commits,json=gitCommits,proto3" json:"git_commits,omitempty"`
	// A token to retrieve the next page of results, or empty if there are no
	// more results in the list. Pass this value in
	// [ListGitCommitsRequest.page_token][] to retrieve the next page of
	// results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The total number of [GitCommits][GitCommit] that matched the query.
	Total                int32    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListGitCommitsResponse) Reset()         { *m = ListGitCommitsResponse{} }
func (m *ListGitCommitsResponse) String() string { return proto.CompactTextString(m) }
func (*ListGitCommitsResponse) ProtoMessage()    {}
func (*ListGitCommitsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4308c33cfcf987be, []int{1}
}

func (m *ListGitCommitsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListGitCommitsResponse.Unmarshal(m, b)
}
func (m *ListGitCommitsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListGitCommitsResponse.Marshal(b, m, deterministic)
}
func (m *ListGitCommitsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGitCommitsResponse.Merge(m, src)
}
func (m *ListGitCommitsResponse) XXX_Size() int {
	return xxx_messageInfo_ListGitCommitsResponse.Size(m)
}
func (m *ListGitCommitsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGitCommitsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListGitCommitsResponse proto.InternalMessageInfo

func (m *ListGitCommitsResponse) GetGitCommits() []*GitCommit {
	if m != nil {
		return m.GitCommits
	}
	return nil
}

func (m *ListGitCommitsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *ListGitCommitsResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// Response message for [SampleService.GetGitCommit][].
type GetGitCommitRequest struct {
	// Required. The fully qualified name of the [GitCommit][], in the format
	// `owners/*/repositories/*/gitCommits/*`.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGitCommitRequest) Reset()         { *m = GetGitCommitRequest{} }
func (m *GetGitCommitRequest) String() string { return proto.CompactTextString(m) }
func (*GetGitCommitRequest) ProtoMessage()    {}
func (*GetGitCommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4308c33cfcf987be, []int{2}
}

func (m *GetGitCommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGitCommitRequest.Unmarshal(m, b)
}
func (m *GetGitCommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGitCommitRequest.Marshal(b, m, deterministic)
}
func (m *GetGitCommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGitCommitRequest.Merge(m, src)
}
func (m *GetGitCommitRequest) XXX_Size() int {
	return xxx_messageInfo_GetGitCommitRequest.Size(m)
}
func (m *GetGitCommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGitCommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGitCommitRequest proto.InternalMessageInfo

func (m *GetGitCommitRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request message for [SampleService.ListFiles][].
type ListFilesRequest struct {
	// Required. The resource name of the repository associated with the
	// [Files][File], in the format `owners/*/repositories/*`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. Limit the number of [Files][File] to include in the
	// response. Fewer files than requested might be returned.
	//
	// The maximum page size is `100`. If unspecified, the page size will be the
	// maximum. Further [Files][File] can subsequently be obtained
	// by including the [ListFilesResponse.next_page_token][] in a
	// subsequent request.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. To request the first page of results, `page_token` must be empty.
	// To request the next page of results, page_token must be the value of
	// [ListFilesResponse.next_page_token][] returned by a previous call to
	// [FileService.ListFiles][].
	//
	// The page token is valid for only 2 hours.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. Filter expression used to only include resources that match the
	// filter in the response. Filter must be in following the format:
	//
	//     field1=123
	//     field2="Foo bar"
	//     field3 IN (value3, value4)
	//     field4 LIKE "%somestring%"
	//
	// Valid filter fields are: `name`, `repo`, and `size`.
	//
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. Specify how the results should be sorted. The fields supported
	// for sorting are `name` and `size`.
	// The default ordering is by `name`. Prefix with `-` to specify
	// descending order, e.g. `-name`.
	OrderBy              string   `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListFilesRequest) Reset()         { *m = ListFilesRequest{} }
func (m *ListFilesRequest) String() string { return proto.CompactTextString(m) }
func (*ListFilesRequest) ProtoMessage()    {}
func (*ListFilesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4308c33cfcf987be, []int{3}
}

func (m *ListFilesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListFilesRequest.Unmarshal(m, b)
}
func (m *ListFilesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListFilesRequest.Marshal(b, m, deterministic)
}
func (m *ListFilesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFilesRequest.Merge(m, src)
}
func (m *ListFilesRequest) XXX_Size() int {
	return xxx_messageInfo_ListFilesRequest.Size(m)
}
func (m *ListFilesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFilesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListFilesRequest proto.InternalMessageInfo

func (m *ListFilesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListFilesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListFilesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListFilesRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListFilesRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

// Response message for [SampleService.ListFiles][].
type ListFilesResponse struct {
	// The list of [Files][File].
	Files []*File `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	// A token to retrieve the next page of results, or empty if there are no
	// more results in the list. Pass this value in
	// [ListFilesRequest.page_token][] to retrieve the next page of
	// results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The total number of [Files][File] that matched the query.
	Total                int32    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListFilesResponse) Reset()         { *m = ListFilesResponse{} }
func (m *ListFilesResponse) String() string { return proto.CompactTextString(m) }
func (*ListFilesResponse) ProtoMessage()    {}
func (*ListFilesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4308c33cfcf987be, []int{4}
}

func (m *ListFilesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListFilesResponse.Unmarshal(m, b)
}
func (m *ListFilesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListFilesResponse.Marshal(b, m, deterministic)
}
func (m *ListFilesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFilesResponse.Merge(m, src)
}
func (m *ListFilesResponse) XXX_Size() int {
	return xxx_messageInfo_ListFilesResponse.Size(m)
}
func (m *ListFilesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFilesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListFilesResponse proto.InternalMessageInfo

func (m *ListFilesResponse) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *ListFilesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *ListFilesResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// Request message for [SampleService.ListSnippets][].
type ListSnippetsRequest struct {
	// Required. The resource name of the repository associated with the
	// [Snippets][Snippet], in the format `owners/*/repositories/*`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. Limit the number of [Snippets][Snippet] to include in the
	// response. Fewer snippets than requested might be returned.
	//
	// The maximum page size is `100`. If unspecified, the page size will be the
	// maximum. Further [Snippets][Snippet] can subsequently be obtained
	// by including the [ListSnippetsResponse.next_page_token][] in a
	// subsequent request.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. To request the first page of results, `page_token` must be empty.
	// To request the next page of results, page_token must be the value of
	// [ListSnippetsResponse.next_page_token][] returned by a previous call to
	// [SnippetService.ListSnippets][].
	//
	// The page token is valid for only 2 hours.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. Filter expression used to only include resources that match the
	// filter in the response. Filter must be in following the format:
	//
	//     field1=123
	//     field2="Foo bar"
	//     field3 IN (value3, value4)
	//     field4 LIKE "%somestring%"
	//
	// Valid filter fields are: `region_tag`, `content`, `file.name`, `file.repo`.
	//
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. Specify how the results should be sorted. The fields supported
	// for sorting are `name` and `size`.
	// The default ordering is by `name`. Prefix with `-` to specify
	// descending order, e.g. `-name`.
	OrderBy              string   `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSnippetsRequest) Reset()         { *m = ListSnippetsRequest{} }
func (m *ListSnippetsRequest) String() string { return proto.CompactTextString(m) }
func (*ListSnippetsRequest) ProtoMessage()    {}
func (*ListSnippetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4308c33cfcf987be, []int{5}
}

func (m *ListSnippetsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSnippetsRequest.Unmarshal(m, b)
}
func (m *ListSnippetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSnippetsRequest.Marshal(b, m, deterministic)
}
func (m *ListSnippetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSnippetsRequest.Merge(m, src)
}
func (m *ListSnippetsRequest) XXX_Size() int {
	return xxx_messageInfo_ListSnippetsRequest.Size(m)
}
func (m *ListSnippetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSnippetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSnippetsRequest proto.InternalMessageInfo

func (m *ListSnippetsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListSnippetsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListSnippetsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListSnippetsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListSnippetsRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

// Response message for [SampleService.ListSnippets][].
type ListSnippetsResponse struct {
	// The list of [Snippets][Snippet].
	Snippets []*Snippet `protobuf:"bytes,1,rep,name=snippets,proto3" json:"snippets,omitempty"`
	// A token to retrieve the next page of results, or empty if there are no
	// more results in the list. Pass this value in
	// [ListSnippetsRequest.page_token][] to retrieve the next page of
	// results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The total number of [Snippets][Snippet] that matched the query.
	Total                int32    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSnippetsResponse) Reset()         { *m = ListSnippetsResponse{} }
func (m *ListSnippetsResponse) String() string { return proto.CompactTextString(m) }
func (*ListSnippetsResponse) ProtoMessage()    {}
func (*ListSnippetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4308c33cfcf987be, []int{6}
}

func (m *ListSnippetsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSnippetsResponse.Unmarshal(m, b)
}
func (m *ListSnippetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSnippetsResponse.Marshal(b, m, deterministic)
}
func (m *ListSnippetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSnippetsResponse.Merge(m, src)
}
func (m *ListSnippetsResponse) XXX_Size() int {
	return xxx_messageInfo_ListSnippetsResponse.Size(m)
}
func (m *ListSnippetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSnippetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSnippetsResponse proto.InternalMessageInfo

func (m *ListSnippetsResponse) GetSnippets() []*Snippet {
	if m != nil {
		return m.Snippets
	}
	return nil
}

func (m *ListSnippetsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *ListSnippetsResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// Request message for [SampleService.ListSnippetVersions][].
type ListSnippetVersionsRequest struct {
	// Required. The resource name of the repository associated with the
	// [SnippetVersions][Snippet], in the format `owners/*/repositories/*/snippets/*/languages/*`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. Limit the number of [SnippetVersions][SnippetVersion] to include in the
	// response. Fewer snippetVersions than requested might be returned.
	//
	// The maximum page size is `10`. If unspecified, the page size will be the
	// maximum. Further [SnippetVersions][SnippetVersion] can subsequently be obtained
	// by including the [ListSnippetVersionsResponse.next_page_token][] in a
	// subsequent request.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. To request the first page of results, `page_token` must be empty.
	// To request the next page of results, page_token must be the value of
	// [ListSnippetVersionsResponse.next_page_token][] returned by a previous call to
	// [SnippetVersionService.ListSnippetVersions][].
	//
	// The page token is valid for only 2 hours.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. Filter expression used to only include resources that match the
	// filter in the response. Filter must be in following the format:
	//
	//     field1=123
	//     field2="Foo bar"
	//     field3 IN (value3, value4)
	//     field4 LIKE "%somestring%"
	//
	// Valid filter fields are: `region_tag`, `content`, `file.name`, `file.repo`.
	//
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. Specify how the results should be sorted. The fields supported
	// for sorting are `name` and `size`.
	// The default ordering is by `name`. Prefix with `-` to specify
	// descending order, e.g. `-name`.
	OrderBy              string   `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSnippetVersionsRequest) Reset()         { *m = ListSnippetVersionsRequest{} }
func (m *ListSnippetVersionsRequest) String() string { return proto.CompactTextString(m) }
func (*ListSnippetVersionsRequest) ProtoMessage()    {}
func (*ListSnippetVersionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4308c33cfcf987be, []int{7}
}

func (m *ListSnippetVersionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSnippetVersionsRequest.Unmarshal(m, b)
}
func (m *ListSnippetVersionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSnippetVersionsRequest.Marshal(b, m, deterministic)
}
func (m *ListSnippetVersionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSnippetVersionsRequest.Merge(m, src)
}
func (m *ListSnippetVersionsRequest) XXX_Size() int {
	return xxx_messageInfo_ListSnippetVersionsRequest.Size(m)
}
func (m *ListSnippetVersionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSnippetVersionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSnippetVersionsRequest proto.InternalMessageInfo

func (m *ListSnippetVersionsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListSnippetVersionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListSnippetVersionsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListSnippetVersionsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListSnippetVersionsRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

// Response message for [SampleService.ListSnippetVersions][].
type ListSnippetVersionsResponse struct {
	// The list of [SnippetVersions][SnippetVersion].
	SnippetVersions []*SnippetVersion `protobuf:"bytes,1,rep,name=snippet_versions,json=snippetVersions,proto3" json:"snippet_versions,omitempty"`
	// A token to retrieve the next page of results, or empty if there are no
	// more results in the list. Pass this value in
	// [ListSnippetVersionsRequest.page_token][] to retrieve the next page of
	// results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The total number of [SnippetVersions][SnippetVersion] that matched the query.
	Total                int32    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSnippetVersionsResponse) Reset()         { *m = ListSnippetVersionsResponse{} }
func (m *ListSnippetVersionsResponse) String() string { return proto.CompactTextString(m) }
func (*ListSnippetVersionsResponse) ProtoMessage()    {}
func (*ListSnippetVersionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4308c33cfcf987be, []int{8}
}

func (m *ListSnippetVersionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSnippetVersionsResponse.Unmarshal(m, b)
}
func (m *ListSnippetVersionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSnippetVersionsResponse.Marshal(b, m, deterministic)
}
func (m *ListSnippetVersionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSnippetVersionsResponse.Merge(m, src)
}
func (m *ListSnippetVersionsResponse) XXX_Size() int {
	return xxx_messageInfo_ListSnippetVersionsResponse.Size(m)
}
func (m *ListSnippetVersionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSnippetVersionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSnippetVersionsResponse proto.InternalMessageInfo

func (m *ListSnippetVersionsResponse) GetSnippetVersions() []*SnippetVersion {
	if m != nil {
		return m.SnippetVersions
	}
	return nil
}

func (m *ListSnippetVersionsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *ListSnippetVersionsResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterType((*ListGitCommitsRequest)(nil), "drghs.v1.ListGitCommitsRequest")
	proto.RegisterType((*ListGitCommitsResponse)(nil), "drghs.v1.ListGitCommitsResponse")
	proto.RegisterType((*GetGitCommitRequest)(nil), "drghs.v1.GetGitCommitRequest")
	proto.RegisterType((*ListFilesRequest)(nil), "drghs.v1.ListFilesRequest")
	proto.RegisterType((*ListFilesResponse)(nil), "drghs.v1.ListFilesResponse")
	proto.RegisterType((*ListSnippetsRequest)(nil), "drghs.v1.ListSnippetsRequest")
	proto.RegisterType((*ListSnippetsResponse)(nil), "drghs.v1.ListSnippetsResponse")
	proto.RegisterType((*ListSnippetVersionsRequest)(nil), "drghs.v1.ListSnippetVersionsRequest")
	proto.RegisterType((*ListSnippetVersionsResponse)(nil), "drghs.v1.ListSnippetVersionsResponse")
}

func init() { proto.RegisterFile("sample_service.proto", fileDescriptor_4308c33cfcf987be) }

var fileDescriptor_4308c33cfcf987be = []byte{
	// 675 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xc7, 0xe5, 0xb6, 0xe9, 0x93, 0x4e, 0xdf, 0xb7, 0x7d, 0x8a, 0x71, 0x29, 0x04, 0xab, 0xa0,
	0x12, 0xd1, 0xac, 0x5a, 0x40, 0x9c, 0xb8, 0x50, 0x89, 0x1e, 0x00, 0x09, 0x39, 0x88, 0xab, 0xe5,
	0xb6, 0x53, 0xb3, 0x22, 0xf1, 0x9a, 0xdd, 0x6d, 0xfa, 0xa6, 0x5e, 0x78, 0xb9, 0xf5, 0xc6, 0x09,
	0x09, 0x21, 0x24, 0x3e, 0x04, 0x1f, 0x84, 0x3b, 0x27, 0x3e, 0x08, 0xf2, 0x7a, 0xe3, 0xd8, 0xa9,
	0x0b, 0x95, 0x7a, 0xc9, 0x2d, 0x3b, 0x33, 0xbb, 0xf3, 0x9b, 0x7f, 0x76, 0xff, 0x09, 0xcc, 0xcb,
	0xa0, 0x1d, 0xb7, 0xd0, 0x97, 0x28, 0x3a, 0x6c, 0x1b, 0x1b, 0xb1, 0xe0, 0x8a, 0x93, 0xea, 0x8e,
	0x08, 0x5f, 0xcb, 0x46, 0x67, 0xcd, 0xb9, 0x16, 0x72, 0x1e, 0xb6, 0x90, 0x06, 0x31, 0xa3, 0x41,
	0x14, 0x71, 0x15, 0x28, 0xc6, 0x23, 0x99, 0xd6, 0x39, 0xd3, 0x02, 0x25, 0xdf, 0x13, 0xdb, 0xd8,
	0x0d, 0x5c, 0x31, 0xe7, 0xf8, 0x7d, 0x09, 0xf7, 0xab, 0x05, 0xff, 0x3f, 0x63, 0x52, 0x6d, 0x32,
	0xb5, 0xc1, 0xdb, 0x6d, 0xa6, 0xa4, 0x87, 0x6f, 0xf7, 0x50, 0x2a, 0xb2, 0x00, 0xa3, 0x71, 0x20,
	0x30, 0x52, 0xb6, 0x55, 0xb3, 0x56, 0xc6, 0x3c, 0xb3, 0x22, 0x8b, 0x30, 0x16, 0x07, 0x21, 0xfa,
	0x92, 0x1d, 0xa1, 0x3d, 0x54, 0xb3, 0x56, 0x2a, 0x5e, 0x35, 0x09, 0x34, 0xd9, 0x11, 0x92, 0x25,
	0x00, 0x9d, 0x54, 0xfc, 0x0d, 0x46, 0xf6, 0xb0, 0xde, 0xa8, 0xcb, 0x5f, 0x26, 0x81, 0xe4, 0xcc,
	0x5d, 0xd6, 0x52, 0x28, 0xec, 0x91, 0xf4, 0xcc, 0x74, 0x45, 0xae, 0x42, 0x95, 0x8b, 0x1d, 0x14,
	0xfe, 0xd6, 0xa1, 0x5d, 0xd1, 0x99, 0xff, 0xf4, 0xfa, 0xf1, 0xa1, 0x7b, 0x6a, 0xc1, 0x42, 0x3f,
	0xa0, 0x8c, 0x79, 0x24, 0x91, 0xdc, 0x87, 0xf1, 0x90, 0x29, 0x7f, 0x3b, 0x0d, 0xdb, 0x56, 0x6d,
	0x78, 0x65, 0x7c, 0x7d, 0xae, 0xd1, 0xd5, 0xa8, 0x91, 0x6d, 0xf1, 0x20, 0xcc, 0x76, 0x93, 0xdb,
	0x30, 0x1d, 0xe1, 0x81, 0xf2, 0x73, 0x9c, 0x43, 0xba, 0xe5, 0x64, 0x12, 0x7e, 0x91, 0xb1, 0xce,
	0x43, 0x45, 0x71, 0x15, 0xb4, 0xf4, 0x14, 0x15, 0x2f, 0x5d, 0xb8, 0x77, 0x60, 0x6e, 0x13, 0x7b,
	0x30, 0x5d, 0xb1, 0x08, 0x8c, 0x44, 0x41, 0x1b, 0x8d, 0x54, 0xfa, 0xb3, 0xfb, 0xd9, 0x82, 0x99,
	0x84, 0xfc, 0x09, 0x6b, 0xe1, 0xa0, 0xa9, 0xba, 0x0f, 0xb3, 0x39, 0x34, 0xa3, 0xe7, 0x32, 0x54,
	0x76, 0x93, 0x80, 0x51, 0x72, 0xaa, 0xa7, 0x64, 0x52, 0xe7, 0xa5, 0xc9, 0x4b, 0xea, 0xf7, 0xc5,
	0x82, 0xb9, 0xa4, 0x73, 0x33, 0x62, 0x71, 0x8c, 0x03, 0x77, 0xdb, 0xde, 0x5b, 0x30, 0x5f, 0xc4,
	0x33, 0xda, 0xac, 0x42, 0x55, 0x9a, 0x98, 0x91, 0x67, 0xb6, 0x27, 0x8f, 0xa9, 0xf6, 0xb2, 0x92,
	0x4b, 0x8a, 0xf4, 0xdd, 0x02, 0x27, 0x47, 0xf1, 0x0a, 0x85, 0x4c, 0x1e, 0xf7, 0x80, 0x69, 0xf5,
	0xcd, 0x82, 0xc5, 0x52, 0x4a, 0x23, 0xd9, 0x06, 0xcc, 0x18, 0x3d, 0xfc, 0x8e, 0xc9, 0x19, 0xe9,
	0xec, 0x33, 0xd2, 0x99, 0xcd, 0xde, 0xb4, 0x2c, 0x1e, 0x76, 0x39, 0x21, 0xd7, 0x7f, 0x8d, 0xc2,
	0x64, 0x53, 0x1b, 0x69, 0x33, 0xf5, 0x3f, 0x72, 0x6a, 0xc1, 0x54, 0xd1, 0x4e, 0xc8, 0x8d, 0x1e,
	0x4d, 0xa9, 0x13, 0x3a, 0xb5, 0xf3, 0x0b, 0xd2, 0x51, 0xdd, 0x87, 0xef, 0x7e, 0xfe, 0xfe, 0x34,
	0xb4, 0x46, 0x28, 0xed, 0xac, 0xd1, 0xe3, 0xf4, 0xeb, 0x78, 0xc4, 0xf7, 0x23, 0x14, 0x92, 0xd6,
	0xa9, 0xc0, 0x98, 0x4b, 0xa6, 0xb8, 0x60, 0x28, 0x69, 0xfd, 0x84, 0xe6, 0xcc, 0xe8, 0x18, 0x26,
	0xf2, 0x76, 0x42, 0x96, 0x72, 0xee, 0x75, 0xd6, 0x66, 0x9c, 0x32, 0x73, 0xeb, 0x6b, 0x9e, 0x58,
	0xcf, 0x79, 0xad, 0x73, 0x9d, 0x69, 0xfd, 0x84, 0x1c, 0xc0, 0x58, 0x66, 0x02, 0xc4, 0x29, 0x0e,
	0x99, 0x37, 0x2d, 0x67, 0xb1, 0x34, 0x67, 0x66, 0x5f, 0xd7, 0xed, 0xef, 0x92, 0xfa, 0x85, 0x66,
	0x4f, 0x3d, 0xe4, 0x83, 0x05, 0x13, 0xf9, 0x67, 0x96, 0x9f, 0xbb, 0xc4, 0x1d, 0x9c, 0xeb, 0xe7,
	0xa5, 0x0d, 0xc3, 0x03, 0xcd, 0x40, 0xc9, 0xea, 0x85, 0x18, 0xb2, 0x57, 0xfa, 0xa3, 0x68, 0x46,
	0xd9, 0xa5, 0x5b, 0x2e, 0x6d, 0xd7, 0xf7, 0x0c, 0x9d, 0x5b, 0xff, 0xa8, 0x32, 0x6c, 0x4d, 0xcd,
	0xf6, 0x9c, 0x3c, 0xbd, 0x00, 0x5b, 0x86, 0x46, 0xeb, 0xb4, 0x15, 0x44, 0xe1, 0x5e, 0x10, 0x16,
	0x90, 0x33, 0xc2, 0x8f, 0xe6, 0xb7, 0xc5, 0xcb, 0x6d, 0x27, 0x37, 0x8b, 0x40, 0xf9, 0x5c, 0x97,
	0xd9, 0xfd, 0x5b, 0x89, 0x01, 0xae, 0x6b, 0xe0, 0x65, 0xe2, 0x96, 0x01, 0x9f, 0x14, 0x88, 0xb7,
	0x46, 0xf5, 0xbf, 0x88, 0x7b, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x66, 0x83, 0xb1, 0xaf,
	0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SampleServiceClient is the client API for SampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SampleServiceClient interface {
	// Lists [GitCommits][GitCommit].
	ListGitCommits(ctx context.Context, in *ListGitCommitsRequest, opts ...grpc.CallOption) (*ListGitCommitsResponse, error)
	// Gets a [GitCommit][].
	GetGitCommit(ctx context.Context, in *GetGitCommitRequest, opts ...grpc.CallOption) (*GitCommit, error)
	// Lists [Files][File].
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	// Lists [Snippets][Snippet].
	ListSnippets(ctx context.Context, in *ListSnippetsRequest, opts ...grpc.CallOption) (*ListSnippetsResponse, error)
	// Lists [SnippetVersions][SnippetVersion].
	ListSnippetVersions(ctx context.Context, in *ListSnippetVersionsRequest, opts ...grpc.CallOption) (*ListSnippetVersionsResponse, error)
	// Lists [Repositories][Repository].
	ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error)
}

type sampleServiceClient struct {
	cc *grpc.ClientConn
}

func NewSampleServiceClient(cc *grpc.ClientConn) SampleServiceClient {
	return &sampleServiceClient{cc}
}

func (c *sampleServiceClient) ListGitCommits(ctx context.Context, in *ListGitCommitsRequest, opts ...grpc.CallOption) (*ListGitCommitsResponse, error) {
	out := new(ListGitCommitsResponse)
	err := c.cc.Invoke(ctx, "/drghs.v1.SampleService/ListGitCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) GetGitCommit(ctx context.Context, in *GetGitCommitRequest, opts ...grpc.CallOption) (*GitCommit, error) {
	out := new(GitCommit)
	err := c.cc.Invoke(ctx, "/drghs.v1.SampleService/GetGitCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, "/drghs.v1.SampleService/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) ListSnippets(ctx context.Context, in *ListSnippetsRequest, opts ...grpc.CallOption) (*ListSnippetsResponse, error) {
	out := new(ListSnippetsResponse)
	err := c.cc.Invoke(ctx, "/drghs.v1.SampleService/ListSnippets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) ListSnippetVersions(ctx context.Context, in *ListSnippetVersionsRequest, opts ...grpc.CallOption) (*ListSnippetVersionsResponse, error) {
	out := new(ListSnippetVersionsResponse)
	err := c.cc.Invoke(ctx, "/drghs.v1.SampleService/ListSnippetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sampleServiceClient) ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error) {
	out := new(ListRepositoriesResponse)
	err := c.cc.Invoke(ctx, "/drghs.v1.SampleService/ListRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SampleServiceServer is the server API for SampleService service.
type SampleServiceServer interface {
	// Lists [GitCommits][GitCommit].
	ListGitCommits(context.Context, *ListGitCommitsRequest) (*ListGitCommitsResponse, error)
	// Gets a [GitCommit][].
	GetGitCommit(context.Context, *GetGitCommitRequest) (*GitCommit, error)
	// Lists [Files][File].
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	// Lists [Snippets][Snippet].
	ListSnippets(context.Context, *ListSnippetsRequest) (*ListSnippetsResponse, error)
	// Lists [SnippetVersions][SnippetVersion].
	ListSnippetVersions(context.Context, *ListSnippetVersionsRequest) (*ListSnippetVersionsResponse, error)
	// Lists [Repositories][Repository].
	ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error)
}

func RegisterSampleServiceServer(s *grpc.Server, srv SampleServiceServer) {
	s.RegisterService(&_SampleService_serviceDesc, srv)
}

func _SampleService_ListGitCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGitCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).ListGitCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drghs.v1.SampleService/ListGitCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).ListGitCommits(ctx, req.(*ListGitCommitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_GetGitCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGitCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).GetGitCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drghs.v1.SampleService/GetGitCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).GetGitCommit(ctx, req.(*GetGitCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drghs.v1.SampleService/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_ListSnippets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSnippetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).ListSnippets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drghs.v1.SampleService/ListSnippets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).ListSnippets(ctx, req.(*ListSnippetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_ListSnippetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSnippetVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).ListSnippetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drghs.v1.SampleService/ListSnippetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).ListSnippetVersions(ctx, req.(*ListSnippetVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SampleService_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServiceServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drghs.v1.SampleService/ListRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServiceServer).ListRepositories(ctx, req.(*ListRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SampleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drghs.v1.SampleService",
	HandlerType: (*SampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGitCommits",
			Handler:    _SampleService_ListGitCommits_Handler,
		},
		{
			MethodName: "GetGitCommit",
			Handler:    _SampleService_GetGitCommit_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _SampleService_ListFiles_Handler,
		},
		{
			MethodName: "ListSnippets",
			Handler:    _SampleService_ListSnippets_Handler,
		},
		{
			MethodName: "ListSnippetVersions",
			Handler:    _SampleService_ListSnippetVersions_Handler,
		},
		{
			MethodName: "ListRepositories",
			Handler:    _SampleService_ListRepositories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sample_service.proto",
}
