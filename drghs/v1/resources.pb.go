// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: resources.proto

package drghs_v1

import (
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Issue_Priority int32

const (
	Issue_PRIORITY_UNSPECIFIED Issue_Priority = 0
	Issue_P0                   Issue_Priority = 1
	Issue_P1                   Issue_Priority = 2
	Issue_P2                   Issue_Priority = 3
	Issue_P3                   Issue_Priority = 4
	Issue_P4                   Issue_Priority = 5
)

// Enum value maps for Issue_Priority.
var (
	Issue_Priority_name = map[int32]string{
		0: "PRIORITY_UNSPECIFIED",
		1: "P0",
		2: "P1",
		3: "P2",
		4: "P3",
		5: "P4",
	}
	Issue_Priority_value = map[string]int32{
		"PRIORITY_UNSPECIFIED": 0,
		"P0":                   1,
		"P1":                   2,
		"P2":                   3,
		"P3":                   4,
		"P4":                   5,
	}
)

func (x Issue_Priority) Enum() *Issue_Priority {
	p := new(Issue_Priority)
	*p = x
	return p
}

func (x Issue_Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Issue_Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_resources_proto_enumTypes[0].Descriptor()
}

func (Issue_Priority) Type() protoreflect.EnumType {
	return &file_resources_proto_enumTypes[0]
}

func (x Issue_Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Issue_Priority.Descriptor instead.
func (Issue_Priority) EnumDescriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{5, 0}
}

type Issue_IssueType int32

const (
	Issue_GITHUB_ISSUE_TYPE_UNSPECIFIED Issue_IssueType = 0
	Issue_BUG                           Issue_IssueType = 1
	Issue_FEATURE                       Issue_IssueType = 2
	Issue_QUESTION                      Issue_IssueType = 3
	Issue_CLEANUP                       Issue_IssueType = 4
	Issue_PROCESS                       Issue_IssueType = 5
)

// Enum value maps for Issue_IssueType.
var (
	Issue_IssueType_name = map[int32]string{
		0: "GITHUB_ISSUE_TYPE_UNSPECIFIED",
		1: "BUG",
		2: "FEATURE",
		3: "QUESTION",
		4: "CLEANUP",
		5: "PROCESS",
	}
	Issue_IssueType_value = map[string]int32{
		"GITHUB_ISSUE_TYPE_UNSPECIFIED": 0,
		"BUG":                           1,
		"FEATURE":                       2,
		"QUESTION":                      3,
		"CLEANUP":                       4,
		"PROCESS":                       5,
	}
)

func (x Issue_IssueType) Enum() *Issue_IssueType {
	p := new(Issue_IssueType)
	*p = x
	return p
}

func (x Issue_IssueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Issue_IssueType) Descriptor() protoreflect.EnumDescriptor {
	return file_resources_proto_enumTypes[1].Descriptor()
}

func (Issue_IssueType) Type() protoreflect.EnumType {
	return &file_resources_proto_enumTypes[1]
}

func (x Issue_IssueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Issue_IssueType.Descriptor instead.
func (Issue_IssueType) EnumDescriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{5, 1}
}

type Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IssueCount       int32  `protobuf:"varint,2,opt,name=issue_count,json=issueCount,proto3" json:"issue_count,omitempty"`
	PullRequestCount int32  `protobuf:"varint,3,opt,name=pull_request_count,json=pullRequestCount,proto3" json:"pull_request_count,omitempty"`
}

func (x *Repository) Reset() {
	*x = Repository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{0}
}

func (x *Repository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Repository) GetIssueCount() int32 {
	if x != nil {
		return x.IssueCount
	}
	return 0
}

func (x *Repository) GetPullRequestCount() int32 {
	if x != nil {
		return x.PullRequestCount
	}
	return 0
}

type GitCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Subject        string               `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	AuthorEmail    string               `protobuf:"bytes,3,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
	AuthoredTime   *timestamp.Timestamp `protobuf:"bytes,4,opt,name=authored_time,json=authoredTime,proto3" json:"authored_time,omitempty"`
	CommitterEmail string               `protobuf:"bytes,5,opt,name=committer_email,json=committerEmail,proto3" json:"committer_email,omitempty"`
	CommittedTime  *timestamp.Timestamp `protobuf:"bytes,6,opt,name=committed_time,json=committedTime,proto3" json:"committed_time,omitempty"`
	Sha            string               `protobuf:"bytes,7,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (x *GitCommit) Reset() {
	*x = GitCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitCommit) ProtoMessage() {}

func (x *GitCommit) ProtoReflect() protoreflect.Message {
	mi := &file_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitCommit.ProtoReflect.Descriptor instead.
func (*GitCommit) Descriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{1}
}

func (x *GitCommit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitCommit) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *GitCommit) GetAuthorEmail() string {
	if x != nil {
		return x.AuthorEmail
	}
	return ""
}

func (x *GitCommit) GetAuthoredTime() *timestamp.Timestamp {
	if x != nil {
		return x.AuthoredTime
	}
	return nil
}

func (x *GitCommit) GetCommitterEmail() string {
	if x != nil {
		return x.CommitterEmail
	}
	return ""
}

func (x *GitCommit) GetCommittedTime() *timestamp.Timestamp {
	if x != nil {
		return x.CommittedTime
	}
	return nil
}

func (x *GitCommit) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

type GitHubUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Login string `protobuf:"bytes,2,opt,name=login,proto3" json:"login,omitempty"`
}

func (x *GitHubUser) Reset() {
	*x = GitHubUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHubUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubUser) ProtoMessage() {}

func (x *GitHubUser) ProtoReflect() protoreflect.Message {
	mi := &file_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubUser.ProtoReflect.Descriptor instead.
func (*GitHubUser) Descriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{2}
}

func (x *GitHubUser) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GitHubUser) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

type GitHubComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	User      *GitHubUser          `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Body      string               `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *GitHubComment) Reset() {
	*x = GitHubComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHubComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubComment) ProtoMessage() {}

func (x *GitHubComment) ProtoReflect() protoreflect.Message {
	mi := &file_resources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubComment.ProtoReflect.Descriptor instead.
func (*GitHubComment) Descriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{3}
}

func (x *GitHubComment) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GitHubComment) GetUser() *GitHubUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GitHubComment) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GitHubComment) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GitHubComment) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type GitHubReview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Actor            *GitHubUser          `protobuf:"bytes,2,opt,name=actor,proto3" json:"actor,omitempty"`
	ActorAssociation string               `protobuf:"bytes,3,opt,name=actor_association,json=actorAssociation,proto3" json:"actor_association,omitempty"`
	CreatedAt        *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Body             string               `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	State            string               `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	CommitId         string               `protobuf:"bytes,7,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
}

func (x *GitHubReview) Reset() {
	*x = GitHubReview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHubReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubReview) ProtoMessage() {}

func (x *GitHubReview) ProtoReflect() protoreflect.Message {
	mi := &file_resources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubReview.ProtoReflect.Descriptor instead.
func (*GitHubReview) Descriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{4}
}

func (x *GitHubReview) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GitHubReview) GetActor() *GitHubUser {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *GitHubReview) GetActorAssociation() string {
	if x != nil {
		return x.ActorAssociation
	}
	return ""
}

func (x *GitHubReview) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GitHubReview) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *GitHubReview) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GitHubReview) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

type Issue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Title    string         `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Body     string         `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	Priority Issue_Priority `protobuf:"varint,4,opt,name=priority,proto3,enum=drghs.v1.Issue_Priority" json:"priority,omitempty"`
	// Deprecated: Do not use.
	PriorityUnknown bool                 `protobuf:"varint,5,opt,name=priority_unknown,json=priorityUnknown,proto3" json:"priority_unknown,omitempty"`
	IssueType       Issue_IssueType      `protobuf:"varint,6,opt,name=issue_type,json=issueType,proto3,enum=drghs.v1.Issue_IssueType" json:"issue_type,omitempty"`
	Labels          []string             `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	CreatedAt       *timestamp.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamp.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ClosedAt        *timestamp.Timestamp `protobuf:"bytes,10,opt,name=closed_at,json=closedAt,proto3" json:"closed_at,omitempty"`
	Closed          bool                 `protobuf:"varint,11,opt,name=closed,proto3" json:"closed,omitempty"`
	ClosedBy        *GitHubUser          `protobuf:"bytes,12,opt,name=closed_by,json=closedBy,proto3" json:"closed_by,omitempty"`
	IsPr            bool                 `protobuf:"varint,13,opt,name=is_pr,json=isPr,proto3" json:"is_pr,omitempty"`
	Approved        bool                 `protobuf:"varint,14,opt,name=approved,proto3" json:"approved,omitempty"`
	GitCommit       *GitCommit           `protobuf:"bytes,15,opt,name=git_commit,json=gitCommit,proto3" json:"git_commit,omitempty"`
	Commit          string               `protobuf:"bytes,16,opt,name=commit,proto3" json:"commit,omitempty"`
	IssueId         int32                `protobuf:"varint,17,opt,name=issue_id,json=issueId,proto3" json:"issue_id,omitempty"`
	Url             string               `protobuf:"bytes,18,opt,name=url,proto3" json:"url,omitempty"`
	Assignees       []*GitHubUser        `protobuf:"bytes,19,rep,name=assignees,proto3" json:"assignees,omitempty"`
	Reporter        *GitHubUser          `protobuf:"bytes,20,opt,name=reporter,proto3" json:"reporter,omitempty"`
	Comments        []*GitHubComment     `protobuf:"bytes,21,rep,name=comments,proto3" json:"comments,omitempty"`
	Reviews         []*GitHubReview      `protobuf:"bytes,22,rep,name=reviews,proto3" json:"reviews,omitempty"`
	Repo            string               `protobuf:"bytes,23,opt,name=repo,proto3" json:"repo,omitempty"`
	Blocked         bool                 `protobuf:"varint,24,opt,name=blocked,proto3" json:"blocked,omitempty"`
	ReleaseBlocking bool                 `protobuf:"varint,25,opt,name=release_blocking,json=releaseBlocking,proto3" json:"release_blocking,omitempty"`
}

func (x *Issue) Reset() {
	*x = Issue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue) ProtoMessage() {}

func (x *Issue) ProtoReflect() protoreflect.Message {
	mi := &file_resources_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue.ProtoReflect.Descriptor instead.
func (*Issue) Descriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{5}
}

func (x *Issue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Issue) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Issue) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Issue) GetPriority() Issue_Priority {
	if x != nil {
		return x.Priority
	}
	return Issue_PRIORITY_UNSPECIFIED
}

// Deprecated: Do not use.
func (x *Issue) GetPriorityUnknown() bool {
	if x != nil {
		return x.PriorityUnknown
	}
	return false
}

func (x *Issue) GetIssueType() Issue_IssueType {
	if x != nil {
		return x.IssueType
	}
	return Issue_GITHUB_ISSUE_TYPE_UNSPECIFIED
}

func (x *Issue) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Issue) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Issue) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Issue) GetClosedAt() *timestamp.Timestamp {
	if x != nil {
		return x.ClosedAt
	}
	return nil
}

func (x *Issue) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *Issue) GetClosedBy() *GitHubUser {
	if x != nil {
		return x.ClosedBy
	}
	return nil
}

func (x *Issue) GetIsPr() bool {
	if x != nil {
		return x.IsPr
	}
	return false
}

func (x *Issue) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

func (x *Issue) GetGitCommit() *GitCommit {
	if x != nil {
		return x.GitCommit
	}
	return nil
}

func (x *Issue) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *Issue) GetIssueId() int32 {
	if x != nil {
		return x.IssueId
	}
	return 0
}

func (x *Issue) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Issue) GetAssignees() []*GitHubUser {
	if x != nil {
		return x.Assignees
	}
	return nil
}

func (x *Issue) GetReporter() *GitHubUser {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *Issue) GetComments() []*GitHubComment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Issue) GetReviews() []*GitHubReview {
	if x != nil {
		return x.Reviews
	}
	return nil
}

func (x *Issue) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *Issue) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *Issue) GetReleaseBlocking() bool {
	if x != nil {
		return x.ReleaseBlocking
	}
	return false
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The full path of the  [File][] within its [Repository][].
	Filepath string `protobuf:"bytes,1,opt,name=filepath,proto3" json:"filepath,omitempty"`
	// Output only. The [GitCommit][] of the file.
	GitCommit *GitCommit `protobuf:"bytes,2,opt,name=git_commit,json=gitCommit,proto3" json:"git_commit,omitempty"`
	Size      int32      `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_resources_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{6}
}

func (x *File) GetFilepath() string {
	if x != nil {
		return x.Filepath
	}
	return ""
}

func (x *File) GetGitCommit() *GitCommit {
	if x != nil {
		return x.GitCommit
	}
	return nil
}

func (x *File) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type SnippetVersionMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Used as metadata information on the [SnippetVersion][]
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Usage       string `protobuf:"bytes,3,opt,name=usage,proto3" json:"usage,omitempty"`
	ApiVersion  string `protobuf:"bytes,4,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
}

func (x *SnippetVersionMeta) Reset() {
	*x = SnippetVersionMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnippetVersionMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnippetVersionMeta) ProtoMessage() {}

func (x *SnippetVersionMeta) ProtoReflect() protoreflect.Message {
	mi := &file_resources_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnippetVersionMeta.ProtoReflect.Descriptor instead.
func (*SnippetVersionMeta) Descriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{7}
}

func (x *SnippetVersionMeta) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SnippetVersionMeta) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SnippetVersionMeta) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *SnippetVersionMeta) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

type SnippetVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The resource name for the [SnippetVersion][] in the format
	// `owners/*/repositories/*/snippets/*/snippetVersions/*`.
	Name    string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	File    *File               `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Lines   []string            `protobuf:"bytes,3,rep,name=lines,proto3" json:"lines,omitempty"`
	Content string              `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Meta    *SnippetVersionMeta `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *SnippetVersion) Reset() {
	*x = SnippetVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnippetVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnippetVersion) ProtoMessage() {}

func (x *SnippetVersion) ProtoReflect() protoreflect.Message {
	mi := &file_resources_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnippetVersion.ProtoReflect.Descriptor instead.
func (*SnippetVersion) Descriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{8}
}

func (x *SnippetVersion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SnippetVersion) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *SnippetVersion) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *SnippetVersion) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SnippetVersion) GetMeta() *SnippetVersionMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type Snippet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The resource name for the [Snippet][] in the format
	// `owners/*/repositories/*/snippets/*/languages/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The programming language of the snippet.
	// TODO(jdobry): Switch this from a string to an enum of the languages from
	// https://github.com/src-d/enry.
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	// Output only. A copy of the most recent [SnippetVersion][] of the
	// [Snippet][].
	Primary *SnippetVersion `protobuf:"bytes,3,opt,name=primary,proto3" json:"primary,omitempty"`
}

func (x *Snippet) Reset() {
	*x = Snippet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snippet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snippet) ProtoMessage() {}

func (x *Snippet) ProtoReflect() protoreflect.Message {
	mi := &file_resources_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snippet.ProtoReflect.Descriptor instead.
func (*Snippet) Descriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{9}
}

func (x *Snippet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Snippet) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Snippet) GetPrimary() *SnippetVersion {
	if x != nil {
		return x.Primary
	}
	return nil
}

type Owner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Owner) Reset() {
	*x = Owner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Owner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Owner) ProtoMessage() {}

func (x *Owner) ProtoReflect() protoreflect.Message {
	mi := &file_resources_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Owner.ProtoReflect.Descriptor instead.
func (*Owner) Descriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{10}
}

func (x *Owner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SLO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubLabels         []string           `protobuf:"bytes,1,rep,name=github_labels,json=githubLabels,proto3" json:"github_labels,omitempty"`
	ExcludedGithubLabels []string           `protobuf:"bytes,2,rep,name=excluded_github_labels,json=excludedGithubLabels,proto3" json:"excluded_github_labels,omitempty"`
	AppliesToIssues      bool               `protobuf:"varint,3,opt,name=applies_to_issues,json=appliesToIssues,proto3" json:"applies_to_issues,omitempty"`
	AppliesToPrs         bool               `protobuf:"varint,4,opt,name=applies_to_prs,json=appliesToPrs,proto3" json:"applies_to_prs,omitempty"`
	ResponseTime         *duration.Duration `protobuf:"bytes,5,opt,name=response_time,json=responseTime,proto3" json:"response_time,omitempty"`
	ResolutionTime       *duration.Duration `protobuf:"bytes,6,opt,name=resolution_time,json=resolutionTime,proto3" json:"resolution_time,omitempty"`
	RequiresAssignee     bool               `protobuf:"varint,7,opt,name=requires_assignee,json=requiresAssignee,proto3" json:"requires_assignee,omitempty"`
	Responders           []string           `protobuf:"bytes,8,rep,name=responders,proto3" json:"responders,omitempty"`
}

func (x *SLO) Reset() {
	*x = SLO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SLO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SLO) ProtoMessage() {}

func (x *SLO) ProtoReflect() protoreflect.Message {
	mi := &file_resources_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SLO.ProtoReflect.Descriptor instead.
func (*SLO) Descriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{11}
}

func (x *SLO) GetGithubLabels() []string {
	if x != nil {
		return x.GithubLabels
	}
	return nil
}

func (x *SLO) GetExcludedGithubLabels() []string {
	if x != nil {
		return x.ExcludedGithubLabels
	}
	return nil
}

func (x *SLO) GetAppliesToIssues() bool {
	if x != nil {
		return x.AppliesToIssues
	}
	return false
}

func (x *SLO) GetAppliesToPrs() bool {
	if x != nil {
		return x.AppliesToPrs
	}
	return false
}

func (x *SLO) GetResponseTime() *duration.Duration {
	if x != nil {
		return x.ResponseTime
	}
	return nil
}

func (x *SLO) GetResolutionTime() *duration.Duration {
	if x != nil {
		return x.ResolutionTime
	}
	return nil
}

func (x *SLO) GetRequiresAssignee() bool {
	if x != nil {
		return x.RequiresAssignee
	}
	return false
}

func (x *SLO) GetResponders() []string {
	if x != nil {
		return x.Responders
	}
	return nil
}

var File_resources_proto protoreflect.FileDescriptor

var file_resources_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x64, 0x72, 0x67, 0x68, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x0a,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9b, 0x02,
	0x0a, 0x09, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3f, 0x0a, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x22, 0x32, 0x0a, 0x0a, 0x47,
	0x69, 0x74, 0x48, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x22,
	0xd3, 0x01, 0x0a, 0x0d, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x64, 0x72, 0x67, 0x68, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x75,
	0x62, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xf9, 0x01, 0x0a, 0x0c, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x72, 0x67, 0x68, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x64, 0x22, 0x82, 0x09, 0x0a, 0x05, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x64, 0x72,
	0x67, 0x68, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x2d, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x38,
	0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64, 0x72, 0x67, 0x68, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x72, 0x67,
	0x68, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x50, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x67,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x64, 0x72, 0x67, 0x68, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x09, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x72, 0x67, 0x68, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x72, 0x67,
	0x68, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64,
	0x72, 0x67, 0x68, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x30, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x64, 0x72, 0x67, 0x68, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x48,
	0x75, 0x62, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x4c, 0x0a, 0x08, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x50, 0x30, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x31, 0x10, 0x02,
	0x12, 0x06, 0x0a, 0x02, 0x50, 0x32, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x33, 0x10, 0x04,
	0x12, 0x06, 0x0a, 0x02, 0x50, 0x34, 0x10, 0x05, 0x22, 0x6c, 0x0a, 0x09, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f,
	0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x47, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x05, 0x22, 0x6a, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x0a, 0x67, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x64, 0x72, 0x67, 0x68, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x09, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x0e, 0x53, 0x6e, 0x69,
	0x70, 0x70, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x64, 0x72, 0x67, 0x68, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x72, 0x67, 0x68, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x69,
	0x70, 0x70, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x07, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x64, 0x72, 0x67, 0x68, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x69,
	0x70, 0x70, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x22, 0x1b, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x83, 0x03, 0x0a, 0x03, 0x53, 0x4c, 0x4f, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x34,
	0x0a, 0x16, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x70,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x54, 0x6f, 0x50, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_resources_proto_rawDescOnce sync.Once
	file_resources_proto_rawDescData = file_resources_proto_rawDesc
)

func file_resources_proto_rawDescGZIP() []byte {
	file_resources_proto_rawDescOnce.Do(func() {
		file_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_resources_proto_rawDescData)
	})
	return file_resources_proto_rawDescData
}

var file_resources_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_resources_proto_goTypes = []interface{}{
	(Issue_Priority)(0),         // 0: drghs.v1.Issue.Priority
	(Issue_IssueType)(0),        // 1: drghs.v1.Issue.IssueType
	(*Repository)(nil),          // 2: drghs.v1.Repository
	(*GitCommit)(nil),           // 3: drghs.v1.GitCommit
	(*GitHubUser)(nil),          // 4: drghs.v1.GitHubUser
	(*GitHubComment)(nil),       // 5: drghs.v1.GitHubComment
	(*GitHubReview)(nil),        // 6: drghs.v1.GitHubReview
	(*Issue)(nil),               // 7: drghs.v1.Issue
	(*File)(nil),                // 8: drghs.v1.File
	(*SnippetVersionMeta)(nil),  // 9: drghs.v1.SnippetVersionMeta
	(*SnippetVersion)(nil),      // 10: drghs.v1.SnippetVersion
	(*Snippet)(nil),             // 11: drghs.v1.Snippet
	(*Owner)(nil),               // 12: drghs.v1.Owner
	(*SLO)(nil),                 // 13: drghs.v1.SLO
	(*timestamp.Timestamp)(nil), // 14: google.protobuf.Timestamp
	(*duration.Duration)(nil),   // 15: google.protobuf.Duration
}
var file_resources_proto_depIdxs = []int32{
	14, // 0: drghs.v1.GitCommit.authored_time:type_name -> google.protobuf.Timestamp
	14, // 1: drghs.v1.GitCommit.committed_time:type_name -> google.protobuf.Timestamp
	4,  // 2: drghs.v1.GitHubComment.user:type_name -> drghs.v1.GitHubUser
	14, // 3: drghs.v1.GitHubComment.created_at:type_name -> google.protobuf.Timestamp
	14, // 4: drghs.v1.GitHubComment.updated_at:type_name -> google.protobuf.Timestamp
	4,  // 5: drghs.v1.GitHubReview.actor:type_name -> drghs.v1.GitHubUser
	14, // 6: drghs.v1.GitHubReview.created_at:type_name -> google.protobuf.Timestamp
	0,  // 7: drghs.v1.Issue.priority:type_name -> drghs.v1.Issue.Priority
	1,  // 8: drghs.v1.Issue.issue_type:type_name -> drghs.v1.Issue.IssueType
	14, // 9: drghs.v1.Issue.created_at:type_name -> google.protobuf.Timestamp
	14, // 10: drghs.v1.Issue.updated_at:type_name -> google.protobuf.Timestamp
	14, // 11: drghs.v1.Issue.closed_at:type_name -> google.protobuf.Timestamp
	4,  // 12: drghs.v1.Issue.closed_by:type_name -> drghs.v1.GitHubUser
	3,  // 13: drghs.v1.Issue.git_commit:type_name -> drghs.v1.GitCommit
	4,  // 14: drghs.v1.Issue.assignees:type_name -> drghs.v1.GitHubUser
	4,  // 15: drghs.v1.Issue.reporter:type_name -> drghs.v1.GitHubUser
	5,  // 16: drghs.v1.Issue.comments:type_name -> drghs.v1.GitHubComment
	6,  // 17: drghs.v1.Issue.reviews:type_name -> drghs.v1.GitHubReview
	3,  // 18: drghs.v1.File.git_commit:type_name -> drghs.v1.GitCommit
	8,  // 19: drghs.v1.SnippetVersion.file:type_name -> drghs.v1.File
	9,  // 20: drghs.v1.SnippetVersion.meta:type_name -> drghs.v1.SnippetVersionMeta
	10, // 21: drghs.v1.Snippet.primary:type_name -> drghs.v1.SnippetVersion
	15, // 22: drghs.v1.SLO.response_time:type_name -> google.protobuf.Duration
	15, // 23: drghs.v1.SLO.resolution_time:type_name -> google.protobuf.Duration
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_resources_proto_init() }
func file_resources_proto_init() {
	if File_resources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_resources_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHubUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHubComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHubReview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnippetVersionMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnippetVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snippet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Owner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SLO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_resources_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_resources_proto_goTypes,
		DependencyIndexes: file_resources_proto_depIdxs,
		EnumInfos:         file_resources_proto_enumTypes,
		MessageInfos:      file_resources_proto_msgTypes,
	}.Build()
	File_resources_proto = out.File
	file_resources_proto_rawDesc = nil
	file_resources_proto_goTypes = nil
	file_resources_proto_depIdxs = nil
}
