// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: slo_service.proto

package drghs_v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Request message for [SLOService.ListOwners][].
type ListOwnersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Limit the number of [Owners][Owner] to include in the
	// response. Fewer Owners than requested might be returned.
	//
	// The maximum page size is `100`. If unspecified, the page size will be the
	// maximum. Further [Owners][Owner] can subsequently be obtained
	// by including the [ListOwnersResponse.next_page_token][] in a
	// subsequent request.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. To request the first page of results, `page_token` must be empty.
	// To request the next page of results, page_token must be the value of
	// [ListOwnersResponse.next_page_token][] returned by a previous call to
	// [SLOService.ListOwners][].
	//
	// The page token is valid for only 2 hours.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. Filter expression used to only include resources that match the
	// filter in the response. Filter must be in following the format:
	//
	//     field == "value"
	//
	// Valid filter fields are: `owner.name`.
	Filter string `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. Specify how the results should be sorted.
	// Supported fields for sorting are: `name`.
	// Prefix with `-` to specify descending order, e.g. `-name`.
	OrderBy string `protobuf:"bytes,4,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListOwnersRequest) Reset() {
	*x = ListOwnersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slo_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOwnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOwnersRequest) ProtoMessage() {}

func (x *ListOwnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_slo_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOwnersRequest.ProtoReflect.Descriptor instead.
func (*ListOwnersRequest) Descriptor() ([]byte, []int) {
	return file_slo_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListOwnersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListOwnersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListOwnersRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListOwnersRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Response message for [SLOService.ListOwners][].
type ListOwnersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of [Owners][Owner].
	Owners []*Owner `protobuf:"bytes,1,rep,name=owners,proto3" json:"owners,omitempty"`
	// A token to retrieve the next page of results, or empty if there are no
	// more results in the list. Pass this value in
	// [ListOwnersRequest.page_token][] to retrieve the next page of
	// results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The total number of [Owners][Owner] that matched the query.
	Total int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListOwnersResponse) Reset() {
	*x = ListOwnersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slo_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOwnersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOwnersResponse) ProtoMessage() {}

func (x *ListOwnersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_slo_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOwnersResponse.ProtoReflect.Descriptor instead.
func (*ListOwnersResponse) Descriptor() ([]byte, []int) {
	return file_slo_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListOwnersResponse) GetOwners() []*Owner {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *ListOwnersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListOwnersResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Request message for [SLOService.ListSLOs][].
type ListSLOsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name of the repository associated with the
	// [SLOs][SLO], in the format `owners/*/repositories/*`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. Limit the number of [Issues][Issue] to include in the
	// response. Fewer Issues than requested might be returned.
	//
	// The maximum page size is `100`. If unspecified, the page size will be the
	// maximum. Further [SLOs][SLO] can subsequently be obtained
	// by including the [ListSLOsResponse.next_page_token][] in a
	// subsequent request.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. To request the first page of results, `page_token` must be empty.
	// To request the next page of results, page_token must be the value of
	// [ListSLOsResponse.next_page_token][] returned by a previous call to
	// [SLOService.ListSLOs][].
	//
	// The page token is valid for only 2 hours.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. Filter expression used to only include resources that match the
	// filter in the response. Filter must be in following the format:
	//
	//     field == value
	//
	// Valid filter fields are: `slo.requires_assignee, slo.github_labels`,
	// `slo.excluded_github_labels`, `slo.applies_to_isssues`,
	// `slo.applies_to_prs`.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListSLOsRequest) Reset() {
	*x = ListSLOsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slo_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSLOsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSLOsRequest) ProtoMessage() {}

func (x *ListSLOsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_slo_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSLOsRequest.ProtoReflect.Descriptor instead.
func (*ListSLOsRequest) Descriptor() ([]byte, []int) {
	return file_slo_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListSLOsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListSLOsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSLOsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSLOsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Response message for [SLOService.ListSLOs][].
type ListSLOsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of [SLOs][SLO].
	Slos []*SLO `protobuf:"bytes,1,rep,name=slos,proto3" json:"slos,omitempty"`
	// A token to retrieve the next page of results, or empty if there are no
	// more results in the list. Pass this value in
	// [ListSLOsRequest.page_token][] to retrieve the next page of
	// results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The total number of [SLOs][SLO] that matched the query.
	Total int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListSLOsResponse) Reset() {
	*x = ListSLOsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slo_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSLOsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSLOsResponse) ProtoMessage() {}

func (x *ListSLOsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_slo_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSLOsResponse.ProtoReflect.Descriptor instead.
func (*ListSLOsResponse) Descriptor() ([]byte, []int) {
	return file_slo_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListSLOsResponse) GetSlos() []*SLO {
	if x != nil {
		return x.Slos
	}
	return nil
}

func (x *ListSLOsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListSLOsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_slo_service_proto protoreflect.FileDescriptor

var file_slo_service_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x6c, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x64, 0x72, 0x67, 0x68, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x7b, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x72, 0x67, 0x68, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x7d, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x4c, 0x4f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x4c,
	0x4f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x6c,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x72, 0x67, 0x68, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4c, 0x4f, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0xd3, 0x03, 0x0a, 0x0a,
	0x53, 0x4c, 0x4f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x2e, 0x64, 0x72, 0x67, 0x68, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x64, 0x72, 0x67, 0x68, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x6a, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x53, 0x4c, 0x4f, 0x73, 0x12, 0x19, 0x2e, 0x64, 0x72, 0x67, 0x68, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x4c, 0x4f, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x64, 0x72, 0x67, 0x68, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x4c, 0x4f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73,
	0x6c, 0x6f, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x64, 0x72, 0x67, 0x68, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x72,
	0x67, 0x68, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x74, 0x0a, 0x08, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x4c, 0x4f, 0x73, 0x12, 0x19, 0x2e, 0x64, 0x72, 0x67, 0x68, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x4c, 0x4f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x64, 0x72, 0x67, 0x68, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x4c, 0x4f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x6c, 0x6f,
	0x73, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x64, 0x72, 0x67, 0x68, 0x73, 0x5f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_slo_service_proto_rawDescOnce sync.Once
	file_slo_service_proto_rawDescData = file_slo_service_proto_rawDesc
)

func file_slo_service_proto_rawDescGZIP() []byte {
	file_slo_service_proto_rawDescOnce.Do(func() {
		file_slo_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_slo_service_proto_rawDescData)
	})
	return file_slo_service_proto_rawDescData
}

var file_slo_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_slo_service_proto_goTypes = []interface{}{
	(*ListOwnersRequest)(nil),        // 0: drghs.v1.ListOwnersRequest
	(*ListOwnersResponse)(nil),       // 1: drghs.v1.ListOwnersResponse
	(*ListSLOsRequest)(nil),          // 2: drghs.v1.ListSLOsRequest
	(*ListSLOsResponse)(nil),         // 3: drghs.v1.ListSLOsResponse
	(*Owner)(nil),                    // 4: drghs.v1.Owner
	(*SLO)(nil),                      // 5: drghs.v1.SLO
	(*ListRepositoriesRequest)(nil),  // 6: drghs.v1.ListRepositoriesRequest
	(*ListRepositoriesResponse)(nil), // 7: drghs.v1.ListRepositoriesResponse
}
var file_slo_service_proto_depIdxs = []int32{
	4, // 0: drghs.v1.ListOwnersResponse.owners:type_name -> drghs.v1.Owner
	5, // 1: drghs.v1.ListSLOsResponse.slos:type_name -> drghs.v1.SLO
	0, // 2: drghs.v1.SLOService.ListOwners:input_type -> drghs.v1.ListOwnersRequest
	2, // 3: drghs.v1.SLOService.ListOwnerSLOs:input_type -> drghs.v1.ListSLOsRequest
	6, // 4: drghs.v1.SLOService.ListRepositories:input_type -> drghs.v1.ListRepositoriesRequest
	2, // 5: drghs.v1.SLOService.ListSLOs:input_type -> drghs.v1.ListSLOsRequest
	1, // 6: drghs.v1.SLOService.ListOwners:output_type -> drghs.v1.ListOwnersResponse
	3, // 7: drghs.v1.SLOService.ListOwnerSLOs:output_type -> drghs.v1.ListSLOsResponse
	7, // 8: drghs.v1.SLOService.ListRepositories:output_type -> drghs.v1.ListRepositoriesResponse
	3, // 9: drghs.v1.SLOService.ListSLOs:output_type -> drghs.v1.ListSLOsResponse
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_slo_service_proto_init() }
func file_slo_service_proto_init() {
	if File_slo_service_proto != nil {
		return
	}
	file_resources_proto_init()
	file_service_resources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_slo_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOwnersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slo_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOwnersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slo_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSLOsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slo_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSLOsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_slo_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_slo_service_proto_goTypes,
		DependencyIndexes: file_slo_service_proto_depIdxs,
		MessageInfos:      file_slo_service_proto_msgTypes,
	}.Build()
	File_slo_service_proto = out.File
	file_slo_service_proto_rawDesc = nil
	file_slo_service_proto_goTypes = nil
	file_slo_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SLOServiceClient is the client API for SLOService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SLOServiceClient interface {
	// Lists [Owners][Owner].
	ListOwners(ctx context.Context, in *ListOwnersRequest, opts ...grpc.CallOption) (*ListOwnersResponse, error)
	// Lists [SLOs][SLO].
	ListOwnerSLOs(ctx context.Context, in *ListSLOsRequest, opts ...grpc.CallOption) (*ListSLOsResponse, error)
	// Lists [Repositories][Repository].
	ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error)
	// Lists [SLOs][SLO].
	ListSLOs(ctx context.Context, in *ListSLOsRequest, opts ...grpc.CallOption) (*ListSLOsResponse, error)
}

type sLOServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSLOServiceClient(cc grpc.ClientConnInterface) SLOServiceClient {
	return &sLOServiceClient{cc}
}

func (c *sLOServiceClient) ListOwners(ctx context.Context, in *ListOwnersRequest, opts ...grpc.CallOption) (*ListOwnersResponse, error) {
	out := new(ListOwnersResponse)
	err := c.cc.Invoke(ctx, "/drghs.v1.SLOService/ListOwners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLOServiceClient) ListOwnerSLOs(ctx context.Context, in *ListSLOsRequest, opts ...grpc.CallOption) (*ListSLOsResponse, error) {
	out := new(ListSLOsResponse)
	err := c.cc.Invoke(ctx, "/drghs.v1.SLOService/ListOwnerSLOs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLOServiceClient) ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error) {
	out := new(ListRepositoriesResponse)
	err := c.cc.Invoke(ctx, "/drghs.v1.SLOService/ListRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sLOServiceClient) ListSLOs(ctx context.Context, in *ListSLOsRequest, opts ...grpc.CallOption) (*ListSLOsResponse, error) {
	out := new(ListSLOsResponse)
	err := c.cc.Invoke(ctx, "/drghs.v1.SLOService/ListSLOs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SLOServiceServer is the server API for SLOService service.
type SLOServiceServer interface {
	// Lists [Owners][Owner].
	ListOwners(context.Context, *ListOwnersRequest) (*ListOwnersResponse, error)
	// Lists [SLOs][SLO].
	ListOwnerSLOs(context.Context, *ListSLOsRequest) (*ListSLOsResponse, error)
	// Lists [Repositories][Repository].
	ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error)
	// Lists [SLOs][SLO].
	ListSLOs(context.Context, *ListSLOsRequest) (*ListSLOsResponse, error)
}

// UnimplementedSLOServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSLOServiceServer struct {
}

func (*UnimplementedSLOServiceServer) ListOwners(context.Context, *ListOwnersRequest) (*ListOwnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOwners not implemented")
}
func (*UnimplementedSLOServiceServer) ListOwnerSLOs(context.Context, *ListSLOsRequest) (*ListSLOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOwnerSLOs not implemented")
}
func (*UnimplementedSLOServiceServer) ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositories not implemented")
}
func (*UnimplementedSLOServiceServer) ListSLOs(context.Context, *ListSLOsRequest) (*ListSLOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSLOs not implemented")
}

func RegisterSLOServiceServer(s *grpc.Server, srv SLOServiceServer) {
	s.RegisterService(&_SLOService_serviceDesc, srv)
}

func _SLOService_ListOwners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOwnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLOServiceServer).ListOwners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drghs.v1.SLOService/ListOwners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLOServiceServer).ListOwners(ctx, req.(*ListOwnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLOService_ListOwnerSLOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSLOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLOServiceServer).ListOwnerSLOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drghs.v1.SLOService/ListOwnerSLOs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLOServiceServer).ListOwnerSLOs(ctx, req.(*ListSLOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLOService_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLOServiceServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drghs.v1.SLOService/ListRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLOServiceServer).ListRepositories(ctx, req.(*ListRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SLOService_ListSLOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSLOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SLOServiceServer).ListSLOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drghs.v1.SLOService/ListSLOs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SLOServiceServer).ListSLOs(ctx, req.(*ListSLOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SLOService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drghs.v1.SLOService",
	HandlerType: (*SLOServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOwners",
			Handler:    _SLOService_ListOwners_Handler,
		},
		{
			MethodName: "ListOwnerSLOs",
			Handler:    _SLOService_ListOwnerSLOs_Handler,
		},
		{
			MethodName: "ListRepositories",
			Handler:    _SLOService_ListRepositories_Handler,
		},
		{
			MethodName: "ListSLOs",
			Handler:    _SLOService_ListSLOs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slo_service.proto",
}
