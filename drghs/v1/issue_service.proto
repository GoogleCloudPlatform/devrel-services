// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package drghs.v1;

import "google/api/annotations.proto";
import "resources.proto";
import "service_resources.proto";
import "admin_service.proto";

// Issue Service
service IssueService {
  // Lists [Repositories][Repository].
  rpc ListRepositories(ListRepositoriesRequest) returns (ListRepositoriesResponse) {
    option (google.api.http) = {
      get: "/api/v1/{parent=owners/*}/repositories"
    };
  }

  // Lists [Issues][Issue].
  rpc ListIssues(ListIssuesRequest) returns (ListIssuesResponse) {
    option (google.api.http) = {
      get: "/api/v1/{parent=*/*}/issues"
    };
  }

  // Gets a [Issue][].
  rpc GetIssue(GetIssueRequest) returns (GetIssueResponse) {
    option (google.api.http) = {
      get: "/api/v1/{name=*/*/issues/*}"
    };
  }
}

// Issue Service Admin
service IssueServiceAdmin{
  rpc UpdateTrackedRepos(UpdateTrackedReposRequest) returns (UpdateTrackedReposResponse) {
    option (google.api.http) = {
      post: "/api/v1/update"
    };  
  }
}

// Request message for [DevRelGitHubService.ListIssues][].
message ListIssuesRequest {
  // Required. The resource name of the repository associated with the
  // [Issues][Issue], in the format `owners/*/repositories/*`.
  string parent = 1;

  // Optional. Limit the number of [Issues][Issue] to include in the
  // response. Fewer Issues than requested might be returned.
  //
  // The maximum page size is `100`. If unspecified, the page size will be the
  // maximum. Further [Issues][Issue] can subsequently be obtained
  // by including the [ListIssuesResponse.next_page_token][] in a
  // subsequent request.
  int32 page_size = 2;

  // Optional. To request the first page of results, `page_token` must be empty.
  // To request the next page of results, page_token must be the value of
  // [ListIssuesResponse.next_page_token][] returned by a previous call to
  // [Issueservice.ListIssues][].
  //
  // The page token is valid for only 2 hours.
  string page_token = 3;

  // Optional. Filter expression used to only include resources that match the
  // filter in the response. Filter must be in following the format:
  //
  //     field1=123
  //     field2="Foo bar"
  //     field3 IN (value3, value4)
  //     field4 LIKE "%somestring%"
  //
  // Valid filter fields are: `name`, `repo.name`, `repo.owner`, and `size`.
  //
  string filter = 4;

  // Optional. Specify how the results should be sorted. The fields supported
  // for sorting are `name` and `size`.
  // The default ordering is by `name`. Prefix with `-` to specify
  // descending order, e.g. `-name`.
  string order_by = 5;

  bool comments = 6;

  bool reviews = 7;

  // This is a workaround to allow nullable bools
  oneof pull_request_nullable {
    bool pull_request = 8 [deprecated=true];
  }

  // This is a workaround to allow nullable bools
  oneof closed_nullable {
    bool closed = 9 [deprecated=true];
  }
}

// Response message for [DevRelGitHubService.ListIssues][].
message ListIssuesResponse {
  // The list of [Issues][Issue].
  repeated drghs.v1.Issue issues = 1;

  // A token to retrieve the next page of results, or empty if there are no
  // more results in the list. Pass this value in
  // [ListIssuesRequest.page_token][] to retrieve the next page of
  // results.
  string next_page_token = 2;

  // The total number of [Issues][Issue] that matched the query.
  int32 total = 3;
}

// Response message for [DevRelGitHubService.GetIssue][].
message GetIssueRequest {
  // Required. The fully qualified name of the [Issue][], in the format
  // `owners/*/repositories/*/issues/*`.
  string name = 1;

  // Specifies if to include the [Issue]'s Comments
  bool comments = 2;

  // Specifies if to inlcude the [Issue]'s Reviews
  bool reviews = 3;
}

message GetIssueResponse {
  Issue issue = 1;
}
